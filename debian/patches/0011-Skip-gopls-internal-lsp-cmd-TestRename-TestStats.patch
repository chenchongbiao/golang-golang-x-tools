From: Anthony Fok <foka@debian.org>
Date: Thu, 3 Aug 2023 19:20:04 +0800
Subject: Skip gopls/internal/lsp/cmd TestRename and TestStats

Origin: vendor
Forwarded: not-needed
Last-Update: 2023-06-26

TestRename's "in 'package' identifier" subtest expects the error message

  gopls: cannot rename package: module path "example.com" is the same as
  the package path, so renaming the package directory would have no effect

but when GO111MODULE=off, gets an alternative error message instead:

  gopls: cannot rename package: missing module information for package "_."

Similarly, TestStats gives different counts when GO111MODULE=off: 

  stats.WorkspaceStats.Views[0].WorkspaceModules = 0, want 1
  stats.WorkspaceStats.Views[0].WorkspacePackages = 1, want 2
Last-Update: 2023-06-26
---
 gopls/internal/lsp/cmd/test/integration_test.go | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/gopls/internal/lsp/cmd/test/integration_test.go b/gopls/internal/lsp/cmd/test/integration_test.go
index 5c694d0..8140c7f 100644
--- a/gopls/internal/lsp/cmd/test/integration_test.go
+++ b/gopls/internal/lsp/cmd/test/integration_test.go
@@ -568,6 +568,7 @@ func oldname() {}
 
 // TestRename tests the 'rename' subcommand (../rename.go).
 func TestRename(t *testing.T) {
+	t.Skip("in 'package' identifier gives different error message without Go mod")
 	t.Parallel()
 
 	tree := writeTree(t, `
@@ -682,6 +683,7 @@ const c = 0
 }
 
 func TestStats(t *testing.T) {
+	t.Skip("gives different results without Go mod")
 	t.Parallel()
 
 	tree := writeTree(t, `
